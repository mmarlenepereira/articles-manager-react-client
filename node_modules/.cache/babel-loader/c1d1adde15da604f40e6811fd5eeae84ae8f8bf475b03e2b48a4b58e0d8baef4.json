{"ast":null,"code":"var _jsxFileName = \"/Users/mariamarlene.pereira/article-manager-client/src/components/ArticleDetail.js\";\nimport { render, screen, waitFor } from '@testing-library/react';\nimport axios from 'axios';\nimport MockAdapter from 'axios-mock-adapter';\nimport ArticleDetail from '../components/ArticleDetail';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ndescribe('ArticleDetail', () => {\n  let mockAxios;\n  beforeEach(() => {\n    mockAxios = new MockAdapter(axios);\n  });\n  afterEach(() => {\n    mockAxios.reset();\n  });\n  it('fetches and displays the article details', async () => {\n    const article = {\n      id: '63',\n      title: 'Test Article',\n      body: 'This is a test article body.',\n      published: true\n    };\n    mockAxios.onGet(`/articles/${article.id}`).reply(200, article);\n    render( /*#__PURE__*/_jsxDEV(ArticleDetail, {\n      id: article.id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 12\n    }, this));\n    await waitFor(() => {\n      expect(screen.getByText(`Details of the article #${article.id}`)).toBeInTheDocument();\n      expect(screen.getByText(`Title: ${article.title}`)).toBeInTheDocument();\n      expect(screen.getByText(`Description: ${article.body}`)).toBeInTheDocument();\n      expect(screen.getByText(`Published: Yes`)).toBeInTheDocument();\n    });\n  });\n});","map":{"version":3,"names":["render","screen","waitFor","axios","MockAdapter","ArticleDetail","jsxDEV","_jsxDEV","describe","mockAxios","beforeEach","afterEach","reset","it","article","id","title","body","published","onGet","reply","fileName","_jsxFileName","lineNumber","columnNumber","expect","getByText","toBeInTheDocument"],"sources":["/Users/mariamarlene.pereira/article-manager-client/src/components/ArticleDetail.js"],"sourcesContent":["import { render, screen, waitFor } from '@testing-library/react';\nimport axios from 'axios';\nimport MockAdapter from 'axios-mock-adapter';\nimport ArticleDetail from '../components/ArticleDetail';\n\ndescribe('ArticleDetail', () => {\n  let mockAxios;\n\n  beforeEach(() => {\n    mockAxios = new MockAdapter(axios);\n  });\n\n  afterEach(() => {\n    mockAxios.reset();\n  });\n\n  it('fetches and displays the article details', async () => {\n    const article = {\n      id: '63',\n      title: 'Test Article',\n      body: 'This is a test article body.',\n      published: true\n    };\n\n    mockAxios.onGet(`/articles/${article.id}`).reply(200, article);\n\n    render(<ArticleDetail id={article.id} />);\n\n    await waitFor(() => {\n      expect(screen.getByText(`Details of the article #${article.id}`)).toBeInTheDocument();\n      expect(screen.getByText(`Title: ${article.title}`)).toBeInTheDocument();\n      expect(screen.getByText(`Description: ${article.body}`)).toBeInTheDocument();\n      expect(screen.getByText(`Published: Yes`)).toBeInTheDocument();\n    });\n  });\n});\n\n\n\n\n\n"],"mappings":";AAAA,SAASA,MAAM,EAAEC,MAAM,EAAEC,OAAO,QAAQ,wBAAwB;AAChE,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,WAAW,MAAM,oBAAoB;AAC5C,OAAOC,aAAa,MAAM,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExDC,QAAQ,CAAC,eAAe,EAAE,MAAM;EAC9B,IAAIC,SAAS;EAEbC,UAAU,CAAC,MAAM;IACfD,SAAS,GAAG,IAAIL,WAAW,CAACD,KAAK,CAAC;EACpC,CAAC,CAAC;EAEFQ,SAAS,CAAC,MAAM;IACdF,SAAS,CAACG,KAAK,EAAE;EACnB,CAAC,CAAC;EAEFC,EAAE,CAAC,0CAA0C,EAAE,YAAY;IACzD,MAAMC,OAAO,GAAG;MACdC,EAAE,EAAE,IAAI;MACRC,KAAK,EAAE,cAAc;MACrBC,IAAI,EAAE,8BAA8B;MACpCC,SAAS,EAAE;IACb,CAAC;IAEDT,SAAS,CAACU,KAAK,CAAE,aAAYL,OAAO,CAACC,EAAG,EAAC,CAAC,CAACK,KAAK,CAAC,GAAG,EAAEN,OAAO,CAAC;IAE9Dd,MAAM,eAACO,OAAA,CAACF,aAAa;MAACU,EAAE,EAAED,OAAO,CAACC;IAAG;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,CAAC;IAEzC,MAAMtB,OAAO,CAAC,MAAM;MAClBuB,MAAM,CAACxB,MAAM,CAACyB,SAAS,CAAE,2BAA0BZ,OAAO,CAACC,EAAG,EAAC,CAAC,CAAC,CAACY,iBAAiB,EAAE;MACrFF,MAAM,CAACxB,MAAM,CAACyB,SAAS,CAAE,UAASZ,OAAO,CAACE,KAAM,EAAC,CAAC,CAAC,CAACW,iBAAiB,EAAE;MACvEF,MAAM,CAACxB,MAAM,CAACyB,SAAS,CAAE,gBAAeZ,OAAO,CAACG,IAAK,EAAC,CAAC,CAAC,CAACU,iBAAiB,EAAE;MAC5EF,MAAM,CAACxB,MAAM,CAACyB,SAAS,CAAE,gBAAe,CAAC,CAAC,CAACC,iBAAiB,EAAE;IAChE,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}